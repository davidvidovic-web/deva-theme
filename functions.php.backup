<?php
/**
 * Theme functions and definitions
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Enqueue child theme styles
 */
function hello_elementor_child_enqueue_styles()
{
    wp_enqueue_style(
        'hello-elementor-child-style',
        get_stylesheet_directory_uri() . '/style.css',
        [
            'hello-elementor-theme-style',
        ],
        wp_get_theme()->get('Version')
    );
}
add_action('wp_enqueue_scripts', 'hello_elementor_child_enqueue_styles');

/**
 * Load DEVA shortcodes
 */
require_once get_stylesheet_directory() . '/inc/shortcodes-loader.php';

/**
 * Enable user registration on theme activation
 */
add_action('after_switch_theme', 'deva_enable_user_registration');

function deva_enable_user_registration()
{
    // Enable user registration
    update_option('users_can_register', 1);
    
    // Set default role to customer (WooCommerce)
    update_option('default_role', 'customer');
}

/**
 * =============================================================================
 * CUSTOM AMELIA FUNCTIONALITY - FRONTEND WEEKLY DATE SELECTION
 * =============================================================================
 */

/**
 * Enqueue frontend scripts for Amelia weekly date selection
 */
add_action('wp_enqueue_scripts', 'deva_enqueue_amelia_frontend_scripts');

function deva_enqueue_amelia_frontend_scripts()
{
    // Only load on pages with Amelia booking widgets
    if (is_admin()) return;
    
    global $post;
    if (!$post) return;
    
    if (has_shortcode($post->post_content, 'ameliabooking') || 
        has_shortcode($post->post_content, 'ameliacatalog') ||
        has_shortcode($post->post_content, 'ameliaevents')) {
        
        wp_enqueue_script(
            'deva-amelia-recurring',
            get_stylesheet_directory_uri() . '/assets/js/amelia-recurring.js',
            ['jquery'],
            '1.0.1',
            true
        );
        
        // Pass configuration to JavaScript
        wp_localize_script('deva-amelia-recurring', 'devaAmeliaConfig', [
            'recurringWeeks' => 4, // Number of additional weeks to auto-select
            'recurringKeywords' => ['weekly', 'recurring', 'course', 'program', 'series', 'package'],
            'debug' => defined('WP_DEBUG') && WP_DEBUG
        ]);
    }
}

/**
 * Create the frontend JavaScript file for weekly date selection
 */
add_action('init', 'deva_create_amelia_recurring_js');

function deva_create_amelia_recurring_js()
{
    // Only run this once to create the file
    if (get_option('deva_amelia_js_created', false)) {
        return;
    }
    
    $js_file_path = get_stylesheet_directory() . '/assets/js/amelia-recurring.js';
    
    // Ensure directory exists
    $js_dir = dirname($js_file_path);
    if (!file_exists($js_dir)) {
        wp_mkdir_p($js_dir);
    }
    
    $js_content = "/**
 * DEVA Amelia Recurring Appointments - Frontend Auto Date Selection
 * Automatically shows weekly recurring dates when customer picks first date
 */

(function($) {
    'use strict';
    
    let devaAmeliaRecurring = {
        config: window.devaAmeliaConfig || {},
        isRecurringService: false,
        selectedDates: [],
        
        init: function() {
            this.log('DEVA Amelia Recurring initialized');
            this.waitForAmelia();
        },
        
        waitForAmelia: function() {
            let attempts = 0;
            let maxAttempts = 100;
            
            let checkAmelia = () => {
                attempts++;
                
                // Check for various Amelia selectors
                if ($('.amelia-app-booking').length > 0 || 
                    $('.amelia-booking').length > 0 ||
                    $('.amelia-step-booking').length > 0 ||
                    $('[id*=\"amelia\"]').length > 0) {
                    this.log('Amelia booking widget detected');
                    setTimeout(() => this.initializeRecurringLogic(), 1000);
                    return;
                }
                
                if (attempts < maxAttempts) {
                    setTimeout(checkAmelia, 300);
                }
            };
            
            setTimeout(checkAmelia, 500);
        },
        
        initializeRecurringLogic: function() {
            this.log('Initializing recurring logic');
            this.monitorServiceSelection();
            this.monitorDateSelection();
            this.addObserver();
        },
        
        addObserver: function() {
            // Use MutationObserver to watch for dynamic changes
            let observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.addedNodes.length > 0) {
                        // Check if service selection changed
                        this.checkServiceSelectionChange();
                        // Check if date selection changed
                        if (this.isRecurringService) {
                            this.checkDateSelectionChange();
                        }
                    }
                });
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true,
                attributes: true,
                attributeFilter: ['class', 'value']
            });
        },
        
        monitorServiceSelection: function() {
            // Initial check
            this.checkServiceSelectionChange();
            
            // Regular polling as backup
            setInterval(() => this.checkServiceSelectionChange(), 1000);
        },
        
        monitorDateSelection: function() {
            // Initial check
            this.checkDateSelectionChange();
            
            // Regular polling for date changes
            setInterval(() => {
                if (this.isRecurringService) {
                    this.checkDateSelectionChange();
                }
            }, 1000);
        },
        
        checkServiceSelectionChange: function() {
            let serviceSelectors = [
                '.amelia-select-service .el-input__inner',
                '.amelia-select-service input',
                '.amelia-service-name',
                '.el-select__input input',
                '[data-service-name]',
                '.amelia-booking-form select option:selected',
                '.amelia-select-service .el-select__selected'
            ];
            
            let selectedService = null;
            
            for (let selector of serviceSelectors) {
                let elements = $(selector);
                elements.each(function() {
                    let value = $(this).val() || $(this).text() || $(this).attr('data-service-name');
                    if (value && value.trim() && value !== 'Select service') {
                        selectedService = value.trim();
                        return false; // break
                    }
                });
                if (selectedService) break;
            }
            
            if (selectedService && selectedService !== this.lastCheckedService) {
                this.lastCheckedService = selectedService;
                this.isRecurringService = this.checkIfRecurringService(selectedService);
                this.log('Service selected: ' + selectedService + ' | Is recurring: ' + this.isRecurringService);
                
                if (this.isRecurringService) {
                    this.showRecurringNotice();
                } else {
                    this.hideRecurringNotice();
                }
            }
        },
        
        checkDateSelectionChange: function() {
            if (!this.isRecurringService) return;
            
            let dateSelectors = [
                '.amelia-calendar .el-calendar-day.is-selected',
                '.amelia-calendar .selected-date',
                '.amelia-date-picker input',
                '.el-date-editor input',
                '.el-input__inner[placeholder*=\"date\"]',
                '.amelia-booking-form input[type=\"date\"]'
            ];
            
            let selectedDate = null;
            
            for (let selector of dateSelectors) {
                let element = $(selector);
                if (element.length > 0) {
                    selectedDate = element.val() || element.attr('data-date') || element.text();
                    if (selectedDate && selectedDate.trim()) {
                        selectedDate = selectedDate.trim();
                        break;
                    }
                }
            }
            
            if (selectedDate && selectedDate !== this.lastSelectedDate) {
                this.lastSelectedDate = selectedDate;
                this.log('Date selected: ' + selectedDate);
                this.handleDateSelection(selectedDate);
            }
        },
        
        checkIfRecurringService: function(serviceName) {
            if (!serviceName) return false;
            
            let name = serviceName.toLowerCase();
            let keywords = this.config.recurringKeywords || ['weekly', 'recurring', 'course', 'program', 'series', 'package'];
            
            return keywords.some(keyword => name.includes(keyword.toLowerCase()));
        },
        
        handleDateSelection: function(selectedDate) {
            this.log('Handling recurring date selection for: ' + selectedDate);
            
            // Parse the selected date
            let startDate = this.parseDate(selectedDate);
            if (!startDate) {
                this.log('Could not parse selected date: ' + selectedDate);
                return;
            }
            
            // Calculate weekly recurring dates
            let recurringDates = this.calculateRecurringDates(startDate);
            this.selectedDates = [startDate].concat(recurringDates);
            
            this.log('Generated recurring dates: ' + this.selectedDates.map(d => d.toDateString()).join(', '));
            
            // Update the UI to show recurring dates
            this.updateRecurringDatesDisplay();
        },
        
        parseDate: function(dateString) {
            // Clean the date string
            dateString = dateString.replace(/[^\\d\\/\\-\\.\\s]/g, '').trim();
            
            // Try multiple date formats
            let formats = [
                /^(\\d{4})-(\\d{1,2})-(\\d{1,2})$/, // YYYY-MM-DD
                /^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/, // MM/DD/YYYY or DD/MM/YYYY
                /^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/, // MM-DD-YYYY or DD-MM-YYYY
                /^(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$/ // DD.MM.YYYY
            ];
            
            for (let i = 0; i < formats.length; i++) {
                let match = dateString.match(formats[i]);
                if (match) {
                    let year, month, day;
                    
                    if (i === 0) { // YYYY-MM-DD
                        [, year, month, day] = match;
                    } else { // Other formats - assume first number is day for EU format
                        [, day, month, year] = match;
                    }
                    
                    // Validate the date components
                    year = parseInt(year);
                    month = parseInt(month);
                    day = parseInt(day);
                    
                    if (year > 1900 && year < 2100 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
                        return new Date(year, month - 1, day);
                    }
                }
            }
            
            // Fallback to Date constructor
            let date = new Date(dateString);
            return isNaN(date.getTime()) ? null : date;
        },
        
        calculateRecurringDates: function(startDate) {
            let recurringDates = [];
            let weeks = this.config.recurringWeeks || 4;
            
            for (let i = 1; i <= weeks; i++) {
                let nextDate = new Date(startDate);
                nextDate.setDate(startDate.getDate() + (i * 7));
                recurringDates.push(nextDate);
            }
            
            return recurringDates;
        },
        
        updateRecurringDatesDisplay: function() {
            // Remove existing recurring dates display
            $('.deva-recurring-dates-display').remove();
            
            // Create new display
            let html = '<div class=\"deva-recurring-dates-display\" style=\"background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #48733d; font-family: Arial, sans-serif;\">';
            html += '<div style=\"font-size: 16px; font-weight: bold; color: #2d5a27; margin-bottom: 10px;\">🔄 Weekly Recurring Package</div>';
            html += '<p style=\"margin: 5px 0; color: #333; font-size: 14px;\">Your appointments will be scheduled for:</p>';
            html += '<ul style=\"margin: 10px 0; padding-left: 20px; color: #555;\">';
            
            this.selectedDates.forEach((date, index) => {
                let dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
                let dateStr = date.toLocaleDateString('en-US', dateOptions);
                let label = index === 0 ? ' <strong>(Selected)</strong>' : ' <em>(Week ' + index + ')</em>';
                html += '<li style=\"margin: 5px 0;\">' + dateStr + label + '</li>';
            });
            
            html += '</ul>';
            html += '<p style=\"margin: 10px 0 0 0; font-size: 12px; color: #666; font-style: italic;\">All ' + this.selectedDates.length + ' appointments will be scheduled with the same time and provider.</p>';
            html += '</div>';
            
            // Find the best place to insert the display
            let insertAfter = $('.amelia-calendar').first();
            if (insertAfter.length === 0) {
                insertAfter = $('.amelia-date-picker').first();
            }
            if (insertAfter.length === 0) {
                insertAfter = $('.el-calendar').first();
            }
            if (insertAfter.length === 0) {
                insertAfter = $('.amelia-step-booking').first();
            }
            if (insertAfter.length === 0) {
                insertAfter = $('.amelia-app-booking').first();
            }
            
            if (insertAfter.length > 0) {
                insertAfter.after(html);
            }
        },
        
        showRecurringNotice: function() {
            // Remove existing notice
            $('.deva-recurring-service-notice').remove();
            
            // Add notice about recurring service
            let html = '<div class=\"deva-recurring-service-notice\" style=\"background: #fff3cd; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #ffc107; font-family: Arial, sans-serif;\">';
            html += '<div style=\"font-size: 16px; font-weight: bold; color: #856404; margin-bottom: 8px;\">📅 Recurring Service Package</div>';
            html += '<p style=\"margin: 0; color: #856404; font-size: 14px;\">When you select your preferred date, we will automatically show you ' + (this.config.recurringWeeks || 4) + ' weekly appointments that will be scheduled for you.</p>';
            html += '</div>';
            
            // Find the best place to insert the notice
            let insertBefore = $('.amelia-step-booking').first();
            if (insertBefore.length === 0) {
                insertBefore = $('.amelia-app-booking .amelia-booking-form').first();
            }
            if (insertBefore.length === 0) {
                insertBefore = $('.amelia-app-booking').first();
            }
            
            if (insertBefore.length > 0) {
                insertBefore.prepend(html);
            }
        },
        
        hideRecurringNotice: function() {
            $('.deva-recurring-service-notice, .deva-recurring-dates-display').remove();
        },
        
        log: function(message) {
            if (this.config.debug) {
                console.log('[DEVA Amelia Recurring] ' + message);
            }
        }
    };
    
    // Initialize when document is ready
    $(document).ready(function() {
        devaAmeliaRecurring.init();
    });
    
})(jQuery);";
    
    file_put_contents($js_file_path, $js_content);
    update_option('deva_amelia_js_created', true);
}

/**
 * =============================================================================
 * PAYMENT CUSTOMIZATION - PAY ONCE FOR RECURRING APPOINTMENTS
 * =============================================================================
 */

/**
 * Check if a service is a recurring service based on keywords
 */
function deva_is_recurring_service_by_name($serviceName)
{
    $recurringKeywords = ['weekly', 'recurring', 'course', 'program', 'series', 'package'];
    $serviceName = strtolower($serviceName);
    
    foreach ($recurringKeywords as $keyword) {
        if (strpos($serviceName, strtolower($keyword)) !== false) {
            return true;
        }
    }
    
    return false;
}

/**
 * Get service name by ID
 */
function deva_get_service_name_by_id($serviceId)
{
    global $wpdb;
    
    $serviceName = $wpdb->get_var($wpdb->prepare(
        "SELECT name FROM {$wpdb->prefix}amelia_services WHERE id = %d",
        $serviceId
    ));
    
    return $serviceName ?: '';
}

/**
 * Hook into Amelia's payment calculation to charge only for first appointment
 * when booking recurring services
 */
add_filter('amelia_before_booking_saved', 'deva_modify_recurring_payment', 10, 2);

function deva_modify_recurring_payment($booking, $reservationData)
{
    try {
        // Check if this is a recurring service
        if (isset($booking['serviceId'])) {
            $serviceName = deva_get_service_name_by_id($booking['serviceId']);
            
            if (deva_is_recurring_service_by_name($serviceName)) {
                error_log('DEVA Payment: Processing recurring service payment modification for: ' . $serviceName);
                
                // Store original price for reference
                $originalPrice = $booking['price'] ?? 0;
                
                // Calculate single appointment price (divide by number of weeks + 1)
                $totalWeeks = 5; // 1 original + 4 recurring weeks (configurable)
                $singleAppointmentPrice = $originalPrice / $totalWeeks;
                
                // Modify the booking price to only charge for the first appointment
                $booking['price'] = $singleAppointmentPrice;
                
                error_log("DEVA Payment: Modified price from {$originalPrice} to {$singleAppointmentPrice} for recurring service");
                
                // Add note to booking info
                if (!isset($booking['info'])) {
                    $booking['info'] = '';
                }
                $booking['info'] .= ' [Recurring Package - Paid for first appointment only]';
            }
        }
    } catch (Exception $e) {
        error_log('DEVA Payment Error: ' . $e->getMessage());
    }
    
    return $booking;
}

/**
 * Alternative hook for WooCommerce integration if used with Amelia
 */
add_filter('amelia_payment_amount_filter', 'deva_filter_payment_amount', 10, 3);

function deva_filter_payment_amount($amount, $bookingData, $paymentType)
{
    try {
        // Check if booking data contains recurring service
        if (isset($bookingData['booking']['serviceId'])) {
            $serviceName = deva_get_service_name_by_id($bookingData['booking']['serviceId']);
            
            if (deva_is_recurring_service_by_name($serviceName)) {
                error_log('DEVA Payment Filter: Intercepting payment amount for recurring service: ' . $serviceName);
                
                // Calculate single appointment price
                $totalWeeks = 5; // 1 original + 4 recurring weeks
                $singleAppointmentPrice = $amount / $totalWeeks;
                
                error_log("DEVA Payment Filter: Reduced amount from {$amount} to {$singleAppointmentPrice}");
                
                return $singleAppointmentPrice;
            }
        }
    } catch (Exception $e) {
        error_log('DEVA Payment Filter Error: ' . $e->getMessage());
    }
    
    return $amount;
}

/**
 * Hook into Amelia booking process to automatically create recurring appointments
 * after successful payment of the first appointment
 */
add_action('AmeliaBookingAddedBeforeNotify', 'deva_create_recurring_appointments_after_payment', 10, 2);

function deva_create_recurring_appointments_after_payment($appointment, $container)
{
    try {
        // Prevent infinite loops
        $transientKey = 'deva_recurring_processing_' . $appointment['booking']['id'];
        if (get_transient($transientKey)) {
            return;
        }
        set_transient($transientKey, true, 300);
        
        // Check if this is a recurring service
        $serviceName = deva_get_service_name_by_id($appointment['booking']['serviceId']);
        
        if (!deva_is_recurring_service_by_name($serviceName)) {
            delete_transient($transientKey);
            return;
        }
        
        error_log('DEVA Recurring: Creating additional appointments for: ' . $serviceName);
        
        // Create 4 additional weekly appointments (free of charge)
        $originalBooking = $appointment['booking'];
        $originalDateTime = new DateTime($originalBooking['bookingStart']);
        
        for ($week = 1; $week <= 4; $week++) {
            deva_create_free_recurring_appointment($originalBooking, $week);
        }
        
        delete_transient($transientKey);
        error_log('DEVA Recurring: Successfully created recurring appointments');
        
    } catch (Exception $e) {
        error_log('DEVA Recurring Error: ' . $e->getMessage());
        if (isset($transientKey)) {
            delete_transient($transientKey);
        }
    }
}

/**
 * Create a single free recurring appointment
 */
function deva_create_free_recurring_appointment($originalBooking, $weekOffset)
{
    global $wpdb;
    
    try {
        // Calculate new date
        $originalDateTime = new DateTime($originalBooking['bookingStart']);
        $newDateTime = clone $originalDateTime;
        $newDateTime->add(new DateInterval('P' . $weekOffset . 'W'));
        
        // Check provider availability
        if (!deva_check_provider_availability_simple($originalBooking['providerId'], $newDateTime)) {
            error_log("DEVA Recurring: Provider not available for week {$weekOffset}, skipping");
            return false;
        }
        
        // Calculate end time
        $duration = (new DateTime($originalBooking['bookingEnd']))->getTimestamp() - (new DateTime($originalBooking['bookingStart']))->getTimestamp();
        $endDateTime = clone $newDateTime;
        $endDateTime->add(new DateInterval('PT' . $duration . 'S'));
        
        // Create new appointment
        $newAppointmentData = [
            'serviceId' => $originalBooking['serviceId'],
            'providerId' => $originalBooking['providerId'],
            'locationId' => $originalBooking['locationId'] ?? null,
            'bookingStart' => $newDateTime->format('Y-m-d H:i:s'),
            'bookingEnd' => $endDateTime->format('Y-m-d H:i:s'),
            'notifyParticipants' => 1,
            'status' => 'approved', // Auto-approve recurring appointments
            'zoomMeeting' => $originalBooking['zoomMeeting'] ?? null
        ];
        
        $result = $wpdb->insert(
            $wpdb->prefix . 'amelia_appointments',
            $newAppointmentData,
            ['%d', '%d', '%d', '%s', '%s', '%d', '%s', '%s']
        );
        
        if (!$result) {
            error_log("DEVA Recurring: Failed to create appointment for week {$weekOffset}");
            return false;
        }
        
        $newAppointmentId = $wpdb->insert_id;
        
        // Create customer booking with zero price
        $originalCustomerBooking = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$wpdb->prefix}amelia_customer_bookings WHERE appointmentId = %d",
            $originalBooking['id']
        ), ARRAY_A);
        
        if ($originalCustomerBooking) {
            $newBookingData = [
                'appointmentId' => $newAppointmentId,
                'customerId' => $originalCustomerBooking['customerId'],
                'status' => 'approved',
                'price' => 0, // FREE recurring appointment
                'persons' => $originalCustomerBooking['persons'],
                'couponId' => $originalCustomerBooking['couponId'],
                'token' => wp_generate_password(32, false),
                'info' => 'Recurring appointment (Week ' . $weekOffset . ') - Included in package'
            ];
            
            $wpdb->insert(
                $wpdb->prefix . 'amelia_customer_bookings',
                $newBookingData,
                ['%d', '%d', '%s', '%f', '%d', '%d', '%s', '%s']
            );
        }
        
        error_log("DEVA Recurring: Created free appointment for week {$weekOffset} (ID: {$newAppointmentId})");
        return true;
        
    } catch (Exception $e) {
        error_log("DEVA Recurring: Error creating week {$weekOffset} appointment: " . $e->getMessage());
        return false;
    }
}

/**
 * Simple provider availability check
 */
function deva_check_provider_availability_simple($providerId, $dateTime)
{
    global $wpdb;
    
    $startTime = $dateTime->format('Y-m-d H:i:s');
    
    $conflicts = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM {$wpdb->prefix}amelia_appointments 
         WHERE providerId = %d 
         AND bookingStart = %s 
         AND status IN ('approved', 'pending')",
        $providerId,
        $startTime
    ));
    
    return $conflicts == 0;
}

/**
 * Add notice to booking confirmation about recurring package
 */
add_filter('amelia_before_booking_success_filter', 'deva_add_recurring_payment_notice', 10, 2);

function deva_add_recurring_payment_notice($result, $args)
{
    if (isset($result['booking']['serviceId'])) {
        $serviceName = deva_get_service_name_by_id($result['booking']['serviceId']);
        
        if (deva_is_recurring_service_by_name($serviceName)) {
            if (!isset($result['message'])) {
                $result['message'] = '';
            }
            
            $result['message'] .= '<div style="background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 10px 0; border-left: 4px solid #48733d;">';
            $result['message'] .= '<strong>🎉 Recurring Package Confirmed!</strong><br>';
            $result['message'] .= 'You have been charged for the first appointment only. ';
            $result['message'] .= 'Your 4 additional weekly appointments have been automatically scheduled at no extra cost. ';
            $result['message'] .= 'You will receive separate confirmations for each appointment.';
            $result['message'] .= '</div>';
        }
    }
    
    return $result;
}

/**
 * End of Payment Customization
 * =============================================================================
 */

/**
 * End of Custom Amelia Functionality
 * =============================================================================
 */

/**
 * =============================================================================
 * CUSTOM AUTHENTICATION FUNCTIONALITY
 * =============================================================================
 */

/**
 * Handle AJAX authentication requests
 */
add_action('wp_ajax_deva_auth_process', 'deva_handle_auth_process');
add_action('wp_ajax_nopriv_deva_auth_process', 'deva_handle_auth_process');

function deva_handle_auth_process()
{
    // Log the request for debugging
    error_log('DEVA Auth Process: ' . print_r($_POST, true));
    
    // Verify nonce
    if (!wp_verify_nonce($_POST['deva_auth_nonce'], 'deva_auth_action')) {
        error_log('DEVA Auth: Nonce verification failed');
        wp_send_json_error('Security check failed.');
        return;
    }

    $auth_mode = sanitize_text_field($_POST['auth_mode']);
    $username = sanitize_text_field($_POST['username']);
    $password = $_POST['password']; // Don't sanitize passwords
    
    error_log('DEVA Auth: Mode=' . $auth_mode . ', Username=' . $username);
    
    if ($auth_mode === 'login') {
        deva_handle_login($username, $password);
    } elseif ($auth_mode === 'register') {
        $email = sanitize_email($_POST['email']);
        $confirm_password = $_POST['confirm_password'];
        deva_handle_registration($username, $email, $password, $confirm_password);
    } else {
        error_log('DEVA Auth: Invalid auth mode: ' . $auth_mode);
        wp_send_json_error('Invalid authentication mode.');
    }
}

/**
 * Handle user login
 */
function deva_handle_login($username, $password)
{
    // Validate input
    if (empty($username) || empty($password)) {
        wp_send_json_error('Please fill in all required fields.');
        return;
    }

    // Allow login with username or email
    if (is_email($username)) {
        $user = get_user_by('email', $username);
        if ($user) {
            $username = $user->user_login;
        }
    }

    // Attempt authentication
    $creds = array(
        'user_login'    => $username,
        'user_password' => $password,
        'remember'      => !empty($_POST['rememberme'])
    );

    $user = wp_signon($creds, false);

    if (is_wp_error($user)) {
        $error_message = $user->get_error_message();
        
        // Customize error messages for better UX
        if (strpos($error_message, 'incorrect username') !== false) {
            $error_message = 'Invalid username or password.';
        } elseif (strpos($error_message, 'incorrect password') !== false) {
            $error_message = 'Invalid username or password.';
        }
        
        wp_send_json_error($error_message);
        return;
    }

    // Login successful
    wp_set_current_user($user->ID);
    wp_set_auth_cookie($user->ID, !empty($_POST['rememberme']));

    // Determine redirect URL
    $redirect_url = wc_get_page_permalink('myaccount');
    if (!empty($_POST['redirect_to'])) {
        $redirect_url = esc_url_raw($_POST['redirect_to']);
    }

    wp_send_json_success(array(
        'message' => 'Welcome back! Redirecting to your account...',
        'redirect' => $redirect_url
    ));
}

/**
 * Handle user registration
 */
function deva_handle_registration($username, $email, $password, $confirm_password)
{
    // Validate input
    if (empty($username) || empty($email) || empty($password) || empty($confirm_password)) {
        wp_send_json_error('Please fill in all required fields.');
        return;
    }

    // Check if passwords match
    if ($password !== $confirm_password) {
        wp_send_json_error('Passwords do not match.');
        return;
    }

    // Validate username
    if (!validate_username($username)) {
        wp_send_json_error('Invalid username. Please use only letters, numbers, and underscores.');
        return;
    }

    if (username_exists($username)) {
        wp_send_json_error('Username already exists. Please choose a different one.');
        return;
    }

    // Validate email
    if (!is_email($email)) {
        wp_send_json_error('Please enter a valid email address.');
        return;
    }

    if (email_exists($email)) {
        wp_send_json_error('Email address is already registered. Please use a different email or try logging in.');
        return;
    }

    // Validate password strength
    if (strlen($password) < 6) {
        wp_send_json_error('Password must be at least 6 characters long.');
        return;
    }

    // Check if registration is enabled
    if (!get_option('users_can_register')) {
        // Temporarily enable registration for this request
        update_option('users_can_register', 1);
        $temp_enabled_registration = true;
    }

    // Create user
    $user_id = wp_create_user($username, $password, $email);

    if (is_wp_error($user_id)) {
        // Reset registration setting if we temporarily enabled it
        if (isset($temp_enabled_registration)) {
            update_option('users_can_register', 0);
        }
        wp_send_json_error($user_id->get_error_message());
        return;
    }

    // Reset registration setting if we temporarily enabled it
    if (isset($temp_enabled_registration)) {
        update_option('users_can_register', 0);
    }

    // Set user role
    $user = new WP_User($user_id);
    $user->set_role('customer'); // WooCommerce customer role

    // Auto-login the user after registration
    wp_set_current_user($user_id);
    wp_set_auth_cookie($user_id);

    // Send welcome email (optional)
    wp_new_user_notification($user_id, null, 'user');

    // Determine redirect URL
    $redirect_url = wc_get_page_permalink('myaccount');

    wp_send_json_success(array(
        'message' => 'Account created successfully! Welcome to DEVA. Redirecting to your account...',
        'redirect' => $redirect_url
    ));
}

/**
 * Handle password reset functionality
 */
add_action('wp_ajax_deva_reset_password', 'deva_handle_password_reset');
add_action('wp_ajax_nopriv_deva_reset_password', 'deva_handle_password_reset');
add_action('wp_ajax_deva_lost_password', 'deva_handle_lost_password');
add_action('wp_ajax_nopriv_deva_lost_password', 'deva_handle_lost_password');

function deva_handle_lost_password()
{
    // Log the request for debugging
    error_log('DEVA Lost Password: ' . print_r($_POST, true));
    
    // Verify nonce
    if (!wp_verify_nonce($_POST['lost_password_nonce'], 'lost_password_action')) {
        error_log('DEVA Lost Password: Nonce verification failed');
        wp_send_json_error('Security check failed.');
        return;
    }

    $user_login = sanitize_text_field($_POST['user_login']);

    if (empty($user_login)) {
        error_log('DEVA Lost Password: Empty user login');
        wp_send_json_error('Please enter your email address.');
        return;
    }

    // Validate email format
    if (!is_email($user_login)) {
        error_log('DEVA Lost Password: Invalid email format: ' . $user_login);
        wp_send_json_error('Please enter a valid email address.');
        return;
    }

    // Check if user exists
    $user_data = get_user_by('email', $user_login);

    if (!$user_data) {
        error_log('DEVA Lost Password: User not found: ' . $user_login);
        wp_send_json_error('No account found with that email address.');
        return;
    }

    // Generate password reset key
    $reset_key = get_password_reset_key($user_data);
    if (is_wp_error($reset_key)) {
        error_log('DEVA Lost Password: Reset key error: ' . $reset_key->get_error_message());
        wp_send_json_error('Unable to generate reset key. Please try again.');
        return;
    }

    // Create reset URL
    $reset_url = network_site_url("wp-login.php?action=rp&key=$reset_key&login=" . rawurlencode($user_data->user_login), 'login');

    // Send email
    $message = sprintf(
        __('Someone has requested a password reset for the following account:') . "\r\n\r\n" .
        __('Site Name: %s') . "\r\n" .
        __('Username: %s') . "\r\n" .
        __('Email: %s') . "\r\n\r\n" .
        __('If this was a mistake, just ignore this email and nothing will happen.') . "\r\n\r\n" .
        __('To reset your password, visit the following address:') . "\r\n\r\n" .
        '%s' . "\r\n",
        get_bloginfo('name'),
        $user_data->user_login,
        $user_data->user_email,
        $reset_url
    );

    $title = sprintf(__('[%s] Password Reset'), get_bloginfo('name'));

    error_log('DEVA Lost Password: Sending email to ' . $user_data->user_email);
    
    if (wp_mail($user_data->user_email, $title, $message)) {
        error_log('DEVA Lost Password: Email sent successfully');
        wp_send_json_success(array(
            'message' => 'Password reset email has been sent. Please check your email inbox and spam folder.'
        ));
    } else {
        error_log('DEVA Lost Password: Email send failed');
        wp_send_json_error('Unable to send email. Please try again later.');
    }
}

function deva_handle_password_reset()
{
    // Verify nonce
    if (!wp_verify_nonce($_POST['deva_reset_nonce'], 'deva_reset_action')) {
        wp_send_json_error('Security check failed.');
        return;
    }

    $user_login = sanitize_text_field($_POST['user_login']);

    if (empty($user_login)) {
        wp_send_json_error('Please enter your username or email address.');
        return;
    }

    // Check if user exists
    if (is_email($user_login)) {
        $user_data = get_user_by('email', $user_login);
    } else {
        $user_data = get_user_by('login', $user_login);
    }

    if (!$user_data) {
        wp_send_json_error('No user found with that username or email address.');
        return;
    }

    // Generate reset key
    $key = get_password_reset_key($user_data);

    if (is_wp_error($key)) {
        wp_send_json_error($key->get_error_message());
        return;
    }

    // Send reset email
    $message = __('Someone has requested a password reset for the following account:') . "\r\n\r\n";
    $message .= network_home_url('/') . "\r\n\r\n";
    $message .= sprintf(__('Username: %s'), $user_data->user_login) . "\r\n\r\n";
    $message .= __('If this was a mistake, just ignore this email and nothing will happen.') . "\r\n\r\n";
    $message .= __('To reset your password, visit the following address:') . "\r\n\r\n";
    $message .= network_site_url("wp-login.php?action=rp&key=$key&login=" . rawurlencode($user_data->user_login), 'login') . "\r\n";

    $title = sprintf(__('[%s] Password Reset'), get_option('blogname'));

    if (wp_mail($user_data->user_email, wp_specialchars_decode($title), $message)) {
        wp_send_json_success('Password reset email sent! Please check your email.');
    } else {
        wp_send_json_error('Failed to send password reset email. Please try again later.');
    }
}

/**
 * Customize WooCommerce registration to use our form
 */
add_filter('woocommerce_registration_redirect', 'deva_registration_redirect');

function deva_registration_redirect($redirect_to)
{
    return wc_get_page_permalink('myaccount');
}



/**
 * End of Custom Authentication Functionality
 * =============================================================================
 */

/**
 * Enqueue base styles, hero styles, and auth styles
 */
add_action('wp_enqueue_scripts', 'enqueue_custom_styles');

function enqueue_custom_styles()
{
    wp_enqueue_style(
        'deva-base-styles',
        get_stylesheet_directory_uri() . '/assets/css/base.css',
        [],
        wp_get_theme()->get('Version')
    );
    
    wp_enqueue_style(
        'deva-hero-styles', 
        get_stylesheet_directory_uri() . '/assets/css/hero.css',
        [],
        wp_get_theme()->get('Version')
    );
    
    // Enqueue auth styles on account page
    if (is_account_page()) {
        wp_enqueue_style(
            'deva-auth-styles',
            get_stylesheet_directory_uri() . '/assets/css/auth.css',
            [],
            wp_get_theme()->get('Version')
        );
    }
}
